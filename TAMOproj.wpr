#!wing
#!version=3.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.directory-list = [{'dirloc': loc('..'),
                        'excludes': (),
                        'filter': '*',
                        'include_hidden': False,
                        'recursive': True,
                        'watch_for_changes': True}]
proj.file-type = 'normal'
[user attributes]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'cUpChpreeZwnJO6ubsGQGctprq'\
        'L05ByC',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [2],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.22147651006711411,
                 'override_title': None,
                 'pagelist': [('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': 0,
        'tree-states': {'deep': {'column-widths': [1.0],
                                 'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': (0,)},
                        'flat': {'column-widths': [1.0],
                                 'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': (0,)},
                        'mime': {'column-widths': [1.0],
                                 'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}})],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [1,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.36593059936908512,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {None: []},
                       'sel-line': 0,
                       'sel-line-start': 0,
                       'selection_end': 0,
                       'selection_start': 0}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'attrib-starts': [],
                       'first-line': 24,
                       'folded-linenos': [],
                       'history': {None: ["\tprint 'yes'\n",
        'else:\n',
        "\tprint 'no'\n",
        'from TAMO import MotifTools\n',
        "m = MotifTools.Motif_from_text('WGATAR')\n",
        'm\n',
        'r = m.revcomp()\n',
        'r.re\n',
        'm = 1\n',
        'r = 8\n',
        'min([m,r])\n',
        "l = [['f',2],['r',1],['a',9]]\n",
        "l = [[2, 'f'], [1, 'r'], [9,'a']]\n",
        'l.sort\n',
        'l.sort()\n',
        'l.reverse()\n',
        'from numpy import correlate\n',
        'x = [1,2,3,4,1]\n',
        'y1 = [1,2,3,4,5]\n',
        'y2 = [1*3,2*3,3*3,4*3,1*3]\n',
        'y1 = x.reverse()\n',
        'x.reverse()\n',
        'y1 = x[::-1]\n',
        'y2\n',
        'x = array(x)\n',
        'y1 = array(y1)\n',
        'y2 = array(y2)\n',
        'for i in [x,y1,y2]:\n',
        '\tprint i\n',
        "x_x = correlate(x,x,'pearson')\n",
        "x_x = correlate(x,x,mode='pearson')\n",
        'from scipy import stat\n',
        'from scipy import stats\n',
        'stats.stats.pearsonr([1,2,3],[3,2,1])\n',
        'stats.stats.pearsonr(x,y1)\n',
        'y1\n',
        'stats.stats.pearsonr(x,y2)\n',
        'import numpy as np\n',
        'np.correlate(x,x)\n',
        'np.correlate(x,y1)\n',
        'np.cov(x,y2)\n',
        'np.corrcoef(x,y2)\n',
        'np.corrcoef(x,y1)\n',
        'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3,2])\n',
        'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*-1,1*-1,3*-1,2*-1])'\
        '\n',
        'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*-3,1*-3,3*-3,2*-3])'\
        '\n',
        'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*-3,1*-3,3*-3,2*-3])'\
        '\n',
        'from decimal import Decimal\n',
        'x \n',
        'x = [Decimal(1), Decimal(2)]\n',
        'x\n',
        'stats.stats.pearsonr([x,x])\n',
        'stats.stats.pearsonr(x,x)\n',
        'float(2)\n',
        'float(1)\n',
        "float('1')\n",
        "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
        "float('1.54')\n",
        'sys.argv\n',
        "l = ['1\\t2','3\\t4','5\\t6']\n",
        "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
        "r = map(lambda i: i.strip('\\n').split('\\t'), l)\n",
        'r\n',
        "l = ['1\\t2','3\\t4','5\\t6']l\n",
        "l = map(lambda i: i.strip('\\n').split('\\t'), l)\n",
        'from scipy.stats.stats import pearsonr\n',
        'pearsonr([],[])\n',
        "goodProbes = map(lambda l: l.strip(), open('/Users/biggus/Documents"\
        "/James/Data/DoubleBloodMeal/DBMclusterProbesInDougsList.txt' 'rU')."\
        "readlines())\n",
        "goodProbes = map(lambda l: l.strip(), open('/Users/biggus/Documents"\
        "/James/Data/DoubleBloodMeal/DBMclusterProbesInDougsList.txt', 'rU')"\
        ".readlines())\n",
        'len(goodProbes)\n',
        "l = list(l).extend('3')\n",
        "l = '2'\n",
        'l = list(l)\n',
        'l\n',
        'l = [[1,2],[3,4],[5,6],[7,8]]\n',
        'd = {}\n',
        'd = map(lambda i: d[i[1]] = i[0] , l)\n',
        'from TAMO.MotifTools import Motif_from_text\n',
        'import numpy\n',
        'numpy.version\n',
        'numpy.version()\n',
        'from numpy import array\n',
        'a = array([2,3,4,5])\n',
        'a\n',
        'import TAMO.MotifTools\n',
        "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
        'd\n',
        'import sys\n',
        'from cStringIO import StringIO\n',
        'old_stdout\n',
        'print "tada!"\n',
        'foo = stdout.getvalue()\n',
        'foo\n',
        'sys.stdout = sys.__stdout__\n',
        'old_stdout = sys.stdout\n',
        'sys.stdout = stdout = StringIO()\n',
        "print 'message'\n",
        'sys.stdout = old_stdout\n',
        'foobar = stdout.getvalue()\n',
        'foobar\n']},
                       'sel-line': 32,
                       'sel-line-start': 773,
                       'selection_end': 777,
                       'selection_start': 777}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'#AD',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'documentation'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'',
                                       'fReverse': False,
                                       'fSearchText': u'',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('MD/AlignAce.py'),
        {'attrib-starts': [],
         'first-line': 0,
         'folded-linenos': [],
         'sel-line': 4,
         'sel-line-start': 79,
         'selection_end': 87,
         'selection_start': 85},
        1235434745.8435841),
        (loc('MD/AlignAce.py'),
         {'attrib-starts': [('flatten',
                             229)],
          'first-line': 236,
          'folded-linenos': [],
          'sel-line': 250,
          'sel-line-start': 9876,
          'selection_end': 9959,
          'selection_start': 9957},
         1235434747.1763761),
        (loc('MD/AlignAce.py'),
         {'attrib-starts': [('MetaAce',
                             160),
                            ('MetaAce.flatten',
                             201)],
          'first-line': 214,
          'folded-linenos': [],
          'sel-line': 219,
          'sel-line-start': 8510,
          'selection_end': 8581,
          'selection_start': 8579},
         1235434747.321106),
        (loc('MD/AlignAce.py'),
         {'attrib-starts': [('MetaAce',
                             160),
                            ('MetaAce.__init__',
                             170)],
          'first-line': 167,
          'folded-linenos': [],
          'sel-line': 172,
          'sel-line-start': 6557,
          'selection_end': 6587,
          'selection_start': 6585},
         1235434749.2294879),
        (loc('MD/AlignAce.py'),
         {'attrib-starts': [('MetaAce',
                             160),
                            ('MetaAce.flatten',
                             201)],
          'first-line': 205,
          'folded-linenos': [],
          'sel-line': 219,
          'sel-line-start': 8510,
          'selection_end': 8581,
          'selection_start': 8579},
         1235434766.1809731),
        (loc('MD/AlignAce.py'),
         {'attrib-starts': [('MetaAce',
                             160),
                            ('MetaAce._execute',
                             176)],
          'first-line': 167,
          'folded-linenos': [],
          'sel-line': 183,
          'sel-line-start': 7090,
          'selection_end': 7128,
          'selection_start': 7102},
         1235434782.0294781),
        (loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/testAlignAce.py'),
         {'attrib-starts': [],
          'first-line': 24,
          'folded-linenos': [],
          'sel-line': 41,
          'sel-line-start': 1241,
          'selection_end': 1301,
          'selection_start': 1301},
         1235435146.2171381),
        (loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/testAlignAce.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 17,
          'sel-line-start': 674,
          'selection_end': 674,
          'selection_start': 674},
         1235435743.3257151),
        (loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/testMeme.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0},
         1235436098.859169),
        (loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/MD_wrappers.py'),
         {'attrib-starts': [('AceWrap',
                             15),
                            ('AceWrap.go',
                             48)],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 61,
          'sel-line-start': 2356,
          'selection_end': 2356,
          'selection_start': 2356},
         1235436100.7505579),
        (loc('MD/AlignAce.py'),
         {'attrib-starts': [('MetaAce',
                             160),
                            ('MetaAce._execute',
                             176)],
          'first-line': 123,
          'folded-linenos': [],
          'sel-line': 181,
          'sel-line-start': 6970,
          'selection_end': 7023,
          'selection_start': 7023},
         1235436108.240124),
        (loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/testAlignAce.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 1395,
          'selection_start': 0},
         1235436809.049032),
        (loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/testMeme.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 8,
          'sel-line-start': 237,
          'selection_end': 264,
          'selection_start': 264},
         1235444163.9600339),
        (loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/MD_wrappers.py'),
         {'attrib-starts': [('AceWrap',
                             15),
                            ('AceWrap.go',
                             48)],
          'first-line': 84,
          'folded-linenos': [],
          'sel-line': 61,
          'sel-line-start': 2356,
          'selection_end': 2356,
          'selection_start': 2356},
         1235444482.8533001),
        (loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/testMeme.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 8,
          'sel-line-start': 237,
          'selection_end': 264,
          'selection_start': 264},
         1235448203.8804641),
        (loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/MD_wrappers.py'),
         {'attrib-starts': [('MemeWrap',
                             67),
                            ('MemeWrap.__init__',
                             79)],
          'first-line': 100,
          'folded-linenos': [],
          'sel-line': 96,
          'sel-line-start': 3858,
          'selection_end': 3882,
          'selection_start': 3882},
         1235448222.077812),
        [loc('MD/Meme.py'),
         {'attrib-starts': [('Meme',
                             64),
                            ('Meme.__init__',
                             68)],
          'first-line': 62,
          'folded-linenos': [],
          'sel-line': 92,
          'sel-line-start': 3371,
          'selection_end': 3387,
          'selection_start': 3383},
         1235448907.628294],
        [loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/testMeme.py'),
         {'attrib-starts': [],
          'first-line': 4,
          'folded-linenos': [],
          'sel-line': 8,
          'sel-line-start': 237,
          'selection_end': 264,
          'selection_start': 264},
         1235453509.0454559],
        [loc('../../../../../../../../../Users/biggus/Documents/Programming/WingProjects/JamesProject_REPO/MDAP_proj/testBasic.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 713,
          'selection_start': 0},
         1235453509.210254],
        [loc('MD/AlignAce.py'),
         {'attrib-starts': [('MetaAce',
                             160),
                            ('MetaAce._execute',
                             176)],
          'first-line': 123,
          'folded-linenos': [],
          'sel-line': 181,
          'sel-line-start': 6970,
          'selection_end': 7023,
          'selection_start': 7023},
         1235453509.3401511]],
        19),
        'current-loc': None,
        'editor-states': {},
        'has-focus': False},
                               'open_files': []},
        'split_percents': {0: 0.53198294243070365},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {},
                 'splits': 1,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (125,
                         22,
                         1216,
                         700)}]}
guimgr.visual-state = {loc('unknown:<untitled> #1'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: ["\tprint 'yes'\n",
                           'else:\n',
                           "\tprint 'no'\n",
                           'from TAMO import MotifTools\n',
                           "m = MotifTools.Motif_from_text('WGATAR')\n",
                           'm\n',
                           'r = m.revcomp()\n',
                           'r.re\n',
                           'm = 1\n',
                           'r = 8\n',
                           'min([m,r])\n',
                           "l = [['f',2],['r',1],['a',9]]\n",
                           "l = [[2, 'f'], [1, 'r'], [9,'a']]\n",
                           'l.sort\n',
                           'l.sort()\n',
                           'l.reverse()\n',
                           'from numpy import correlate\n',
                           'x = [1,2,3,4,1]\n',
                           'y1 = [1,2,3,4,5]\n',
                           'y2 = [1*3,2*3,3*3,4*3,1*3]\n',
                           'y1 = x.reverse()\n',
                           'x.reverse()\n',
                           'y1 = x[::-1]\n',
                           'y2\n',
                           'x = array(x)\n',
                           'y1 = array(y1)\n',
                           'y2 = array(y2)\n',
                           'for i in [x,y1,y2]:\n',
                           '\tprint i\n',
                           "x_x = correlate(x,x,'pearson')\n",
                           "x_x = correlate(x,x,mode='pearson')\n",
                           'from scipy import stat\n',
                           'from scipy import stats\n',
                           'stats.stats.pearsonr([1,2,3],[3,2,1])\n',
                           'stats.stats.pearsonr(x,y1)\n',
                           'y1\n',
                           'stats.stats.pearsonr(x,y2)\n',
                           'import numpy as np\n',
                           'np.correlate(x,x)\n',
                           'np.correlate(x,y1)\n',
                           'np.cov(x,y2)\n',
                           'np.corrcoef(x,y2)\n',
                           'np.corrcoef(x,y1)\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[0,-2,8,100,3'\
                           ',2])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-1,4*'\
                           '-1,1*-1,3*-1,2*-1])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-1,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'stats.stats.pearsonr([1,2,4,1,3,2],[1*-3,2*-3,4*'\
                           '-3,1*-3,3*-3,2*-3])\n',
                           'from decimal import Decimal\n',
                           'x \n',
                           'x = [Decimal(1), Decimal(2)]\n',
                           'x\n',
                           'stats.stats.pearsonr([x,x])\n',
                           'stats.stats.pearsonr(x,x)\n',
                           'float(2)\n',
                           'float(1)\n',
                           "float('1')\n",
                           "stats.stats.pearsonr(['1','3'], ['3','1'])\n",
                           "float('1.54')\n",
                           'sys.argv\n',
                           "l = ['1\\t2','3\\t4','5\\t6']\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'))\n",
                           "r = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'r\n',
                           "l = ['1\\t2','3\\t4','5\\t6']l\n",
                           "l = map(lambda i: i.strip('\\n').split('\\t'), l"\
                           ")\n",
                           'from scipy.stats.stats import pearsonr\n',
                           'pearsonr([],[])\n',
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt' 'rU').readlines("\
                           "))\n",
                           "goodProbes = map(lambda l: l.strip(), open('/Use"\
                           "rs/biggus/Documents/James/Data/DoubleBloodMeal/D"\
                           "BMclusterProbesInDougsList.txt', 'rU').readlines"\
                           "())\n",
                           'len(goodProbes)\n',
                           "l = list(l).extend('3')\n",
                           "l = '2'\n",
                           'l = list(l)\n',
                           'l\n',
                           'l = [[1,2],[3,4],[5,6],[7,8]]\n',
                           'd = {}\n',
                           'd = map(lambda i: d[i[1]] = i[0] , l)\n',
                           'from TAMO.MotifTools import Motif_from_text\n',
                           'import numpy\n',
                           'numpy.version\n',
                           'numpy.version()\n',
                           'from numpy import array\n',
                           'a = array([2,3,4,5])\n',
                           'a\n',
                           'import TAMO.MotifTools\n',
                           "d = TAMO.MotifTools.Motif_from_text('atgatgac')\n",
                           'd\n',
                           'import sys\n',
                           'from cStringIO import StringIO\n',
                           'old_stdout\n',
                           'print "tada!"\n',
                           'foo = stdout.getvalue()\n',
                           'foo\n',
                           'sys.stdout = sys.__stdout__\n',
                           'old_stdout = sys.stdout\n',
                           'sys.stdout = stdout = StringIO()\n',
                           "print 'message'\n",
                           'sys.stdout = old_stdout\n',
                           'foobar = stdout.getvalue()\n',
                           'foobar\n']},
        'sel-line': 3,
        'sel-line-start': 167,
        'selection_end': 171,
        'selection_start': 171},
                       loc('unknown:<untitled> #2'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #3'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'history': {None: []},
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0}}
