/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;  /**/
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;  /**/
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink(void);
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_Probe swig_types[0] 
#define  SWIGTYPE_p_Probelist swig_types[1] 
#define  SWIGTYPE_p_p_Probe swig_types[2] 
#define  SWIGTYPE_p_std__vectorTdouble_t swig_types[3] 
#define  SWIGTYPE_p_float swig_types[4] 
#define  SWIGTYPE_p_std__vectorTint_t swig_types[5] 
#define  SWIGTYPE_p_double swig_types[6] 
#define  SWIGTYPE_p_p_char swig_types[7] 
#define  SWIGTYPE_p_SeqMat swig_types[8] 
#define  SWIGTYPE_dlist swig_types[9] 
#define  SWIGTYPE_p_Probelist_str swig_types[10] 
#define  SWIGTYPE_p_int swig_types[11] 
static swig_type_info *swig_types[13];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _MDsupport.so
  ------------------------------------------------*/
#define SWIG_init    init_MDsupport

#define SWIG_name    "_MDsupport"

#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void _SWIG_exception(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { _SWIG_exception(a,b); SWIG_fail; }


#include <string>


#include <string>

PyObject* SwigInt_FromBool(bool b) {
    return PyInt_FromLong(b ? 1L : 0L);
}
double SwigNumber_Check(PyObject* o) {
    return PyFloat_Check(o) || PyInt_Check(o) || PyLong_Check(o);
}
double SwigNumber_AsDouble(PyObject* o) {
    return PyFloat_Check(o) ? PyFloat_AsDouble(o) 
        : (PyInt_Check(o) ?   double(PyInt_AsLong(o))
                            : double(PyLong_AsLong(o)));
}
PyObject* SwigString_FromString(const std::string& s) {
    return PyString_FromStringAndSize(s.data(),s.size());
}
std::string SwigString_AsString(PyObject* o) {
    return std::string(PyString_AsString(o));
}


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

int std_vectorlint_g_pop___(std::vector<int > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int x = self->back();
                self->pop_back();
                return x;
            }
int std_vectorlint_g___getitem_____(std::vector<int > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<int > std_vectorlint_g___getslice_____(std::vector<int > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<int > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlint_g___setitem_____(std::vector<int > *self,int i,int x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlint_g___setslice_____(std::vector<int > *self,int i,int j,std::vector<int > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= int(self->size()))
                        self->insert(self->begin()+i,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
void std_vectorlint_g___delitem_____(std::vector<int > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlint_g___delslice_____(std::vector<int > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
double std_vectorldouble_g_pop___(std::vector<double > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                double x = self->back();
                self->pop_back();
                return x;
            }
double std_vectorldouble_g___getitem_____(std::vector<double > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<double > std_vectorldouble_g___getslice_____(std::vector<double > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<double > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorldouble_g___setitem_____(std::vector<double > *self,int i,double x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorldouble_g___setslice_____(std::vector<double > *self,int i,int j,std::vector<double > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= int(self->size()))
                        self->insert(self->begin()+i,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
void std_vectorldouble_g___delitem_____(std::vector<double > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorldouble_g___delslice_____(std::vector<double > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }

/* Put header files here (optional) */
/* #include "MDsupport.h" */
#include "MDsupport.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_IntVector__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_IntVector",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<int > *)new std::vector<int >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IntVector__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    int *arg2 = 0 ;
    std::vector<int > *result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_IntVector",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    temp2 = (int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    result = (std::vector<int > *)new std::vector<int >(arg1,(int const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IntVector__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = 0 ;
    std::vector<int > *result;
    std::vector<int > temp1 ;
    std::vector<int > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_IntVector",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<int >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyInt_Check(o)) {
                    temp1[i] = (int)(PyInt_AsLong(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""int""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTint_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""int" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<int > *)new std::vector<int >((std::vector<int > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IntVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_IntVector__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_IntVector__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if (PyInt_Check(o))
                    _v = 1;
                    else
                    _v = 0;
                    Py_DECREF(o);
                }
            }else {
                /* wrapped vector? */
                std::vector<int >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTint_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_IntVector__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_IntVector__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_IntVector'");
    return NULL;
}


static PyObject *_wrap_IntVector___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    unsigned int result;
    std::vector<int > temp1 ;
    std::vector<int > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IntVector___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<int >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyInt_Check(o)) {
                    temp1[i] = (int)(PyInt_AsLong(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""int""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTint_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""int" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<int > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    bool result;
    std::vector<int > temp1 ;
    std::vector<int > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IntVector___nonzero__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<int >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyInt_Check(o)) {
                    temp1[i] = (int)(PyInt_AsLong(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""int""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTint_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""int" "> expected");
            SWIG_fail;
        }
    }
    result = (bool)((std::vector<int > const *)arg1)->empty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IntVector_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IntVector_append",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IntVector_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)std_vectorlint_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IntVector___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)std_vectorlint_g___getitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:IntVector___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlint_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyInt_FromLong(((std::vector<int > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:IntVector___setitem__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlint_g___setitem_____(arg1,arg2,arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<int > *arg4 = 0 ;
    std::vector<int > temp4 ;
    std::vector<int > *v4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:IntVector___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<int >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj3,i);
                if (PyInt_Check(o)) {
                    temp4[i] = (int)(PyInt_AsLong(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""int""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTint_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""int" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlint_g___setslice_____(arg1,arg2,arg3,(std::vector<int > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IntVector___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlint_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntVector___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:IntVector___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlint_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IntVector(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IntVector",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IntVector_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTint_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<double > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_DoubleVector",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<double > *)new std::vector<double >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    double *arg2 = 0 ;
    std::vector<double > *result;
    double temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DoubleVector",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    temp2 = (double) PyFloat_AsDouble(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    result = (std::vector<double > *)new std::vector<double >(arg1,(double const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = 0 ;
    std::vector<double > *result;
    std::vector<double > temp1 ;
    std::vector<double > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<double >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (SwigNumber_Check(o)) {
                    temp1[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<double > *)new std::vector<double >((std::vector<double > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_DoubleVector__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_DoubleVector__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if (SwigNumber_Check(o))
                    _v = 1;
                    else
                    _v = 0;
                    Py_DECREF(o);
                }
            }else {
                /* wrapped vector? */
                std::vector<double >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTdouble_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_DoubleVector__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_DoubleVector__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_DoubleVector'");
    return NULL;
}


static PyObject *_wrap_DoubleVector___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    unsigned int result;
    std::vector<double > temp1 ;
    std::vector<double > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVector___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<double >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (SwigNumber_Check(o)) {
                    temp1[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<double > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    bool result;
    std::vector<double > temp1 ;
    std::vector<double > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVector___nonzero__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<double >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (SwigNumber_Check(o)) {
                    temp1[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    result = (bool)((std::vector<double > const *)arg1)->empty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVector_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:DoubleVector_append",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (double)std_vectorldouble_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:DoubleVector___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (double)std_vectorldouble_g___getitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<double > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:DoubleVector___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorldouble_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyFloat_FromDouble(((std::vector<double > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oid:DoubleVector___setitem__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorldouble_g___setitem_____(arg1,arg2,arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<double > *arg4 = 0 ;
    std::vector<double > temp4 ;
    std::vector<double > *v4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:DoubleVector___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<double >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj3,i);
                if (SwigNumber_Check(o)) {
                    temp4[i] = (double)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""double""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTdouble_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""double" "> expected");
            SWIG_fail;
        }
    }
    std_vectorldouble_g___setslice_____(arg1,arg2,arg3,(std::vector<double > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:DoubleVector___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorldouble_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DoubleVector___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:DoubleVector___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorldouble_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DoubleVector(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DoubleVector",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTdouble_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DoubleVector_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTdouble_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_seq2int(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 = (int) 0 ;
    int *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s|i:seq2int",&arg1,&arg2)) goto fail;
    result = (int *)seq2int((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_print_seq(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int *arg1 = (int *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:print_seq",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    print_seq(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list2double(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dlist arg1 = (dlist) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list2double",&obj0)) goto fail;
    {
        /* Convert a Python List into an array of values */
        int i,sz;
        sz = PyList_Size(obj0);
        double *arr = new double[sz+1];
        for (i = 0; i < sz; i++) {
            arr[i] = (double) PyFloat_AsDouble(PyList_GetItem(obj0,i));
        }
        arr[i] = 1e20;
        arg1 = arr;
    }
    result = (double *)list2double(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_printdouble(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double *arg1 = (double *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:printdouble",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    printdouble(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_log2_sum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg1 ;
    float arg2 ;
    float result;
    
    if(!PyArg_ParseTuple(args,(char *)"ff:log2_sum",&arg1,&arg2)) goto fail;
    result = (float)log2_sum(arg1,arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_iseq_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Probe_iseq_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->iseq = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_iseq_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Probe_iseq_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int *) ((arg1)->iseq);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_len_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Probe_len_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->len = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_len_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Probe_len_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->len);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_probebg_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Probe_probebg_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->probebg = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_probebg_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Probe_probebg_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->probebg);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_wmerbgs_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    double *arg2 = (double *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Probe_wmerbgs_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->wmerbgs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_wmerbgs_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Probe_wmerbgs_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double *) ((arg1)->wmerbgs);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_Zs_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Probe_Zs_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_float,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->Zs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probe_Zs_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Probe_Zs_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float *) ((arg1)->Zs);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Probe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int *arg1 = (int *) 0 ;
    int arg2 ;
    float arg3 ;
    double *arg4 = (double *) 0 ;
    Probe *result;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OifO:new_Probe",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Probe *)new Probe(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Probe, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Probe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probe *arg1 = (Probe *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Probe",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Probe_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Probe, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Probelist_str_count_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist_str *arg1 = (Probelist_str *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Probelist_str_count_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist_str,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_str_count_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist_str *arg1 = (Probelist_str *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Probelist_str_count_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist_str,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->count);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_str_probes_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist_str *arg1 = (Probelist_str *) 0 ;
    char **arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Probelist_str_probes_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist_str,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_p_char,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        int ii;
        char * *b = (char * *) arg1->probes;
        for (ii = 0; ii < 22000; ii++) b[ii] = *((char * *) arg2 + ii);
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_str_probes_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist_str *arg1 = (Probelist_str *) 0 ;
    char **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Probelist_str_probes_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist_str,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char **)(char **) ((arg1)->probes);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_p_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Probelist_str(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist_str *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Probelist_str")) goto fail;
    result = (Probelist_str *)new Probelist_str();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Probelist_str, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_str_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist_str *arg1 = (Probelist_str *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Probelist_str_append",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist_str,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->append(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Probelist_str(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist_str *arg1 = (Probelist_str *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Probelist_str",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist_str,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_str_count_re_matches(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist_str *arg1 = (Probelist_str *) 0 ;
    char *arg2 ;
    int arg3 = (int) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|i:Probelist_str_count_re_matches",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist_str,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->count_re_matches(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Probelist_str_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Probelist_str, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Probelist_count_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist *arg1 = (Probelist *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Probelist_count_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_count_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist *arg1 = (Probelist *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Probelist_count_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->count);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_probes_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist *arg1 = (Probelist *) 0 ;
    Probe **arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Probelist_probes_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_p_Probe,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        int ii;
        Probe * *b = (Probe * *) arg1->probes;
        for (ii = 0; ii < 22000; ii++) b[ii] = *((Probe * *) arg2 + ii);
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_probes_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist *arg1 = (Probelist *) 0 ;
    Probe **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Probelist_probes_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Probe **)(Probe **) ((arg1)->probes);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_p_Probe, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Probelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Probelist")) goto fail;
    result = (Probelist *)new Probelist();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Probelist, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist *arg1 = (Probelist *) 0 ;
    int *arg2 = (int *) 0 ;
    int arg3 ;
    float arg4 ;
    double *arg5 = (double *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOifO:Probelist_append",&obj0,&obj1,&arg3,&arg4,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->append(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Probelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist *arg1 = (Probelist *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Probelist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_get_Z(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist *arg1 = (Probelist *) 0 ;
    int arg2 ;
    int arg3 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:Probelist_get_Z",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->get_Z(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Probelist_get_Zlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Probelist *arg1 = (Probelist *) 0 ;
    int arg2 ;
    flist result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Probelist_get_Zlist",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (flist)(arg1)->get_Zlist(arg2);
    
    {
        int i;
        int len;
        PyObject *theFloat;
        PyObject *theList;
        
        /* Major Kludge -- crazy values determine end of array */
        for (len=0; result[len]>-999; len++);
        theList = PyList_New(len);
        for (i=0; i<len; i++) {
            theFloat = PyFloat_FromDouble(result[i]);
            PyList_SetItem(theList, i, theFloat);
        }
        resultobj = theList;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Probelist_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Probelist, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_SeqMat_width_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SeqMat_width_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->width = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_width_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SeqMat_width_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->width);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_gamma_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:SeqMat_gamma_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->gamma = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_gamma_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SeqMat_gamma_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->gamma);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_gamma_wt_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:SeqMat_gamma_wt_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->gamma_wt = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_gamma_wt_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SeqMat_gamma_wt_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->gamma_wt);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_deltamin_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:SeqMat_deltamin_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->deltamin = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_deltamin_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SeqMat_deltamin_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->deltamin);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_beta_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:SeqMat_beta_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->beta = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_beta_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SeqMat_beta_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->beta);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_bg_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SeqMat_bg_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_float,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        int ii;
        float *b = (float *) arg1->bg;
        for (ii = 0; ii < 4; ii++) b[ii] = *((float *) arg2 + ii);
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_bg_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SeqMat_bg_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float *)(float *) ((arg1)->bg);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_mask_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SeqMat_mask_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_float,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        int ii;
        float *b = (float *) arg1->mask;
        for (ii = 0; ii < 100; ii++) b[ii] = *((float *) arg2 + ii);
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_mask_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SeqMat_mask_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float *)(float *) ((arg1)->mask);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_joint_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:SeqMat_joint_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->joint = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_joint_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SeqMat_joint_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double) ((arg1)->joint);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SeqMat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    SeqMat *result;
    
    if(!PyArg_ParseTuple(args,(char *)"i:new_SeqMat",&arg1)) goto fail;
    result = (SeqMat *)new SeqMat(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SeqMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_scanbest(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    char *arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SeqMat_scanbest",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->scanbest((char const *)arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_sumscoresabove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    char *arg2 ;
    float arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Osf:SeqMat_sumscoresabove",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->sumscoresabove(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_score(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    int *arg2 = (int *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SeqMat_score",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->score(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiid:SeqMat_set",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:SeqMat_get",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->get(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_get_c(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:SeqMat_get_c",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->get_c(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_compute_ambig(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SeqMat_compute_ambig",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->compute_ambig();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_matchstarts(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    char *arg2 ;
    float arg3 ;
    std::vector<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Osf:SeqMat_matchstarts",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->matchstarts(arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyInt_FromLong(((std::vector<int > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_score_probe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    char *arg2 ;
    flist result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SeqMat_score_probe",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (flist)(arg1)->score_probe(arg2);
    
    {
        int i;
        int len;
        PyObject *theFloat;
        PyObject *theList;
        
        /* Major Kludge -- crazy values determine end of array */
        for (len=0; result[len]>-999; len++);
        theList = PyList_New(len);
        for (i=0; i<len; i++) {
            theFloat = PyFloat_FromDouble(result[i]);
            PyList_SetItem(theList, i, theFloat);
        }
        resultobj = theList;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_EMstep(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    Probelist *arg2 = (Probelist *) 0 ;
    float arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOf:SeqMat_EMstep",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->EMstep(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_setBg(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Odddd:SeqMat_setBg",&obj0,&arg2,&arg3,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setBg(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_setmask(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    int arg2 ;
    float arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oif:SeqMat_setmask",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setmask(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SeqMat_loglikelihood(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    Probelist *arg2 = (Probelist *) 0 ;
    float arg3 ;
    float result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOf:SeqMat_loglikelihood",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Probelist,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->loglikelihood(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SeqMat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SeqMat *arg1 = (SeqMat *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SeqMat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SeqMat,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SeqMat_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SeqMat, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_IntVector", _wrap_new_IntVector, METH_VARARGS },
	 { (char *)"IntVector___len__", _wrap_IntVector___len__, METH_VARARGS },
	 { (char *)"IntVector___nonzero__", _wrap_IntVector___nonzero__, METH_VARARGS },
	 { (char *)"IntVector_clear", _wrap_IntVector_clear, METH_VARARGS },
	 { (char *)"IntVector_append", _wrap_IntVector_append, METH_VARARGS },
	 { (char *)"IntVector_pop", _wrap_IntVector_pop, METH_VARARGS },
	 { (char *)"IntVector___getitem__", _wrap_IntVector___getitem__, METH_VARARGS },
	 { (char *)"IntVector___getslice__", _wrap_IntVector___getslice__, METH_VARARGS },
	 { (char *)"IntVector___setitem__", _wrap_IntVector___setitem__, METH_VARARGS },
	 { (char *)"IntVector___setslice__", _wrap_IntVector___setslice__, METH_VARARGS },
	 { (char *)"IntVector___delitem__", _wrap_IntVector___delitem__, METH_VARARGS },
	 { (char *)"IntVector___delslice__", _wrap_IntVector___delslice__, METH_VARARGS },
	 { (char *)"delete_IntVector", _wrap_delete_IntVector, METH_VARARGS },
	 { (char *)"IntVector_swigregister", IntVector_swigregister, METH_VARARGS },
	 { (char *)"new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS },
	 { (char *)"DoubleVector___len__", _wrap_DoubleVector___len__, METH_VARARGS },
	 { (char *)"DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_VARARGS },
	 { (char *)"DoubleVector_clear", _wrap_DoubleVector_clear, METH_VARARGS },
	 { (char *)"DoubleVector_append", _wrap_DoubleVector_append, METH_VARARGS },
	 { (char *)"DoubleVector_pop", _wrap_DoubleVector_pop, METH_VARARGS },
	 { (char *)"DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS },
	 { (char *)"DoubleVector___getslice__", _wrap_DoubleVector___getslice__, METH_VARARGS },
	 { (char *)"DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS },
	 { (char *)"DoubleVector___setslice__", _wrap_DoubleVector___setslice__, METH_VARARGS },
	 { (char *)"DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS },
	 { (char *)"DoubleVector___delslice__", _wrap_DoubleVector___delslice__, METH_VARARGS },
	 { (char *)"delete_DoubleVector", _wrap_delete_DoubleVector, METH_VARARGS },
	 { (char *)"DoubleVector_swigregister", DoubleVector_swigregister, METH_VARARGS },
	 { (char *)"seq2int", _wrap_seq2int, METH_VARARGS },
	 { (char *)"print_seq", _wrap_print_seq, METH_VARARGS },
	 { (char *)"list2double", _wrap_list2double, METH_VARARGS },
	 { (char *)"printdouble", _wrap_printdouble, METH_VARARGS },
	 { (char *)"log2_sum", _wrap_log2_sum, METH_VARARGS },
	 { (char *)"Probe_iseq_set", _wrap_Probe_iseq_set, METH_VARARGS },
	 { (char *)"Probe_iseq_get", _wrap_Probe_iseq_get, METH_VARARGS },
	 { (char *)"Probe_len_set", _wrap_Probe_len_set, METH_VARARGS },
	 { (char *)"Probe_len_get", _wrap_Probe_len_get, METH_VARARGS },
	 { (char *)"Probe_probebg_set", _wrap_Probe_probebg_set, METH_VARARGS },
	 { (char *)"Probe_probebg_get", _wrap_Probe_probebg_get, METH_VARARGS },
	 { (char *)"Probe_wmerbgs_set", _wrap_Probe_wmerbgs_set, METH_VARARGS },
	 { (char *)"Probe_wmerbgs_get", _wrap_Probe_wmerbgs_get, METH_VARARGS },
	 { (char *)"Probe_Zs_set", _wrap_Probe_Zs_set, METH_VARARGS },
	 { (char *)"Probe_Zs_get", _wrap_Probe_Zs_get, METH_VARARGS },
	 { (char *)"new_Probe", _wrap_new_Probe, METH_VARARGS },
	 { (char *)"delete_Probe", _wrap_delete_Probe, METH_VARARGS },
	 { (char *)"Probe_swigregister", Probe_swigregister, METH_VARARGS },
	 { (char *)"Probelist_str_count_set", _wrap_Probelist_str_count_set, METH_VARARGS },
	 { (char *)"Probelist_str_count_get", _wrap_Probelist_str_count_get, METH_VARARGS },
	 { (char *)"Probelist_str_probes_set", _wrap_Probelist_str_probes_set, METH_VARARGS },
	 { (char *)"Probelist_str_probes_get", _wrap_Probelist_str_probes_get, METH_VARARGS },
	 { (char *)"new_Probelist_str", _wrap_new_Probelist_str, METH_VARARGS },
	 { (char *)"Probelist_str_append", _wrap_Probelist_str_append, METH_VARARGS },
	 { (char *)"delete_Probelist_str", _wrap_delete_Probelist_str, METH_VARARGS },
	 { (char *)"Probelist_str_count_re_matches", _wrap_Probelist_str_count_re_matches, METH_VARARGS },
	 { (char *)"Probelist_str_swigregister", Probelist_str_swigregister, METH_VARARGS },
	 { (char *)"Probelist_count_set", _wrap_Probelist_count_set, METH_VARARGS },
	 { (char *)"Probelist_count_get", _wrap_Probelist_count_get, METH_VARARGS },
	 { (char *)"Probelist_probes_set", _wrap_Probelist_probes_set, METH_VARARGS },
	 { (char *)"Probelist_probes_get", _wrap_Probelist_probes_get, METH_VARARGS },
	 { (char *)"new_Probelist", _wrap_new_Probelist, METH_VARARGS },
	 { (char *)"Probelist_append", _wrap_Probelist_append, METH_VARARGS },
	 { (char *)"delete_Probelist", _wrap_delete_Probelist, METH_VARARGS },
	 { (char *)"Probelist_get_Z", _wrap_Probelist_get_Z, METH_VARARGS },
	 { (char *)"Probelist_get_Zlist", _wrap_Probelist_get_Zlist, METH_VARARGS },
	 { (char *)"Probelist_swigregister", Probelist_swigregister, METH_VARARGS },
	 { (char *)"SeqMat_width_set", _wrap_SeqMat_width_set, METH_VARARGS },
	 { (char *)"SeqMat_width_get", _wrap_SeqMat_width_get, METH_VARARGS },
	 { (char *)"SeqMat_gamma_set", _wrap_SeqMat_gamma_set, METH_VARARGS },
	 { (char *)"SeqMat_gamma_get", _wrap_SeqMat_gamma_get, METH_VARARGS },
	 { (char *)"SeqMat_gamma_wt_set", _wrap_SeqMat_gamma_wt_set, METH_VARARGS },
	 { (char *)"SeqMat_gamma_wt_get", _wrap_SeqMat_gamma_wt_get, METH_VARARGS },
	 { (char *)"SeqMat_deltamin_set", _wrap_SeqMat_deltamin_set, METH_VARARGS },
	 { (char *)"SeqMat_deltamin_get", _wrap_SeqMat_deltamin_get, METH_VARARGS },
	 { (char *)"SeqMat_beta_set", _wrap_SeqMat_beta_set, METH_VARARGS },
	 { (char *)"SeqMat_beta_get", _wrap_SeqMat_beta_get, METH_VARARGS },
	 { (char *)"SeqMat_bg_set", _wrap_SeqMat_bg_set, METH_VARARGS },
	 { (char *)"SeqMat_bg_get", _wrap_SeqMat_bg_get, METH_VARARGS },
	 { (char *)"SeqMat_mask_set", _wrap_SeqMat_mask_set, METH_VARARGS },
	 { (char *)"SeqMat_mask_get", _wrap_SeqMat_mask_get, METH_VARARGS },
	 { (char *)"SeqMat_joint_set", _wrap_SeqMat_joint_set, METH_VARARGS },
	 { (char *)"SeqMat_joint_get", _wrap_SeqMat_joint_get, METH_VARARGS },
	 { (char *)"new_SeqMat", _wrap_new_SeqMat, METH_VARARGS },
	 { (char *)"SeqMat_scanbest", _wrap_SeqMat_scanbest, METH_VARARGS },
	 { (char *)"SeqMat_sumscoresabove", _wrap_SeqMat_sumscoresabove, METH_VARARGS },
	 { (char *)"SeqMat_score", _wrap_SeqMat_score, METH_VARARGS },
	 { (char *)"SeqMat_set", _wrap_SeqMat_set, METH_VARARGS },
	 { (char *)"SeqMat_get", _wrap_SeqMat_get, METH_VARARGS },
	 { (char *)"SeqMat_get_c", _wrap_SeqMat_get_c, METH_VARARGS },
	 { (char *)"SeqMat_compute_ambig", _wrap_SeqMat_compute_ambig, METH_VARARGS },
	 { (char *)"SeqMat_matchstarts", _wrap_SeqMat_matchstarts, METH_VARARGS },
	 { (char *)"SeqMat_score_probe", _wrap_SeqMat_score_probe, METH_VARARGS },
	 { (char *)"SeqMat_EMstep", _wrap_SeqMat_EMstep, METH_VARARGS },
	 { (char *)"SeqMat_setBg", _wrap_SeqMat_setBg, METH_VARARGS },
	 { (char *)"SeqMat_setmask", _wrap_SeqMat_setmask, METH_VARARGS },
	 { (char *)"SeqMat_loglikelihood", _wrap_SeqMat_loglikelihood, METH_VARARGS },
	 { (char *)"delete_SeqMat", _wrap_delete_SeqMat, METH_VARARGS },
	 { (char *)"SeqMat_swigregister", SeqMat_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Probe[] = {{"_p_Probe", 0, "Probe *", 0},{"_p_Probe"},{0}};
static swig_type_info _swigt__p_Probelist[] = {{"_p_Probelist", 0, "Probelist *", 0},{"_p_Probelist"},{0}};
static swig_type_info _swigt__p_p_Probe[] = {{"_p_p_Probe", 0, "Probe **", 0},{"_p_p_Probe"},{0}};
static swig_type_info _swigt__p_std__vectorTdouble_t[] = {{"_p_std__vectorTdouble_t", 0, "std::vector<double > *", 0},{"_p_std__vectorTdouble_t"},{0}};
static swig_type_info _swigt__p_float[] = {{"_p_float", 0, "float *", 0},{"_p_float"},{0}};
static swig_type_info _swigt__p_std__vectorTint_t[] = {{"_p_std__vectorTint_t", 0, "std::vector<int > *", 0},{"_p_std__vectorTint_t"},{0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0},{"_p_double"},{"_dlist"},{0}};
static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0},{"_p_p_char"},{0}};
static swig_type_info _swigt__p_SeqMat[] = {{"_p_SeqMat", 0, "SeqMat *", 0},{"_p_SeqMat"},{0}};
static swig_type_info _swigt__dlist[] = {{"_dlist", 0, "dlist", 0},{"_p_double"},{"_dlist"},{0}};
static swig_type_info _swigt__p_Probelist_str[] = {{"_p_Probelist_str", 0, "Probelist_str *", 0},{"_p_Probelist_str"},{0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0},{"_p_int"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_Probe, 
_swigt__p_Probelist, 
_swigt__p_p_Probe, 
_swigt__p_std__vectorTdouble_t, 
_swigt__p_float, 
_swigt__p_std__vectorTint_t, 
_swigt__p_double, 
_swigt__p_p_char, 
_swigt__p_SeqMat, 
_swigt__dlist, 
_swigt__p_Probelist_str, 
_swigt__p_int, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

